{-# GHC_PRAGMA INTERFACE VERSION 4 #-}
interface Discrim where
import Pol(Pol)
import PreludeRatio(Ratio(..))
import VarPol(VarPol)
type A = VarPol (Ratio Integer)
type K = Ratio Integer
a :: VarPol (Ratio Integer)
b :: VarPol (Ratio Integer)
basis :: [VarPol (Ratio Integer)]
c :: VarPol (Ratio Integer)
check :: [VarPol (Ratio Integer)]
d :: VarPol (Ratio Integer)
e :: VarPol (Ratio Integer)
f :: VarPol (Ratio Integer)
f1 :: VarPol (Ratio Integer)
f2 :: VarPol (Ratio Integer)
f3 :: VarPol (Ratio Integer)
g :: VarPol (Ratio Integer)
gb :: [VarPol (Ratio Integer)]
h :: VarPol (Ratio Integer)
l :: VarPol (Ratio Integer)
n2 :: VarPol (Ratio Integer)
rtUn :: Ratio Integer
rtZero :: Ratio Integer
un :: VarPol (Ratio Integer)
unp :: Pol (Ratio Integer)
vars :: [[Char]]
x :: VarPol (Ratio Integer)

