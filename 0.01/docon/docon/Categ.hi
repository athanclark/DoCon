{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Categ where
import Categ1(AddGroup, CommutativeRing)
import IParse(Expression)
import Matrix(Matrix)
class (Set a) => AddSemigroup a where
	addSmgTerm :: a -> ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char])
	cyclicAdd :: a -> PropValue
	groupAdd :: a -> PropValue
	ordAdd :: a -> PropValue
	add :: a -> a -> a
	zero :: a -> a
	zero_l :: a -> [a]
	neg :: a -> a
	neg_l :: a -> [a]
	sub :: a -> a -> a
	sub_l :: a -> a -> [a]
	times :: a -> Integer -> a
	times_l :: a -> Integer -> [a]
	compare :: a -> a -> Comp
	absV :: a -> a
class (Set a) => MulSemigroup a where
	mulSmgTerm :: a -> ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char])
	commutative :: a -> PropValue
	cyclicMul :: a -> PropValue
	groupMul :: a -> PropValue
	mul :: a -> a -> a
	unity :: a -> a
	unity_l :: a -> [a]
	inv :: a -> a
	inv_l :: a -> [a]
	divide :: a -> a -> a
	divide_l :: a -> a -> [a]
	power :: a -> Integer -> a
	power_l :: a -> Integer -> [a]
	rootN :: [Char] -> a -> Integer -> [a]
class (Eq a, Text a) => Set a where
	setTerm :: a -> ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char])
	card :: a -> [[Integer]]
	w :: a -> [Char] -> [Char]
	fromExpr :: a -> Expression [Char] -> ([a], [Char])
data BinTree a   = Leaf a | BinTree a (BinTree a) (BinTree a)
data Comp   = LT | GT | EQ
type DomAttr = Tree [Char]
data DomCons   = Basic [Char] | Pair ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) | List ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) | MatrixC ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) | FractionC ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) | RatioC ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) | Polynomial ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) [[Char]] | EPolynomial ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) [[Char]] | Ideal ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) | ModOverIntC ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char]) | NoCons
type DomFuncs = [[Char]]
type DomProps = [([Char], PropValue)]
type DomainTerm = ([Char], DomCons, [([Char], PropValue)], [[Char]], Tree [Char])
type PowPr = [Integer]
data PropValue   = Yes | No | Unknown
data Tree a   = EmptyTree | Tree a [Tree a]
and3 :: PropValue -> PropValue -> PropValue
domAttr :: (a, b, c, d, e) -> e
domCons :: (a, e, b, c, d) -> e
domFuncs :: (a, b, c, e, d) -> e
domName :: (e, a, b, c, d) -> e
domProps :: (a, b, e, c, d) -> e
funcNames :: [Char] -> [[Char]]
lValue :: [a] -> [Char] -> a
propNames :: [Char] -> [[Char]]
setDomAttr :: f -> (b, c, d, e, a) -> (b, c, d, e, f)
setDomCons :: c -> (b, a, d, e, f) -> (b, c, d, e, f)
setDomFuncs :: e -> (b, c, d, a, f) -> (b, c, d, e, f)
setDomName :: b -> (a, c, d, e, f) -> (b, c, d, e, f)
setDomProps :: d -> (b, c, a, e, f) -> (b, c, d, e, f)
solvePropEmptyProp :: (PropValue, [a], PropValue) -> PropValue
trivialDomain :: ([Char], DomCons, [a], [b], Tree [Char])
instance AddGroup a => AddSemigroup (Matrix a)
instance AddGroup a => AddSemigroup [a]
instance CommutativeRing a => MulSemigroup (Matrix a)
instance MulSemigroup a => MulSemigroup [a]
instance Set Comp
instance Set PropValue
instance Set Char
instance Set a => Set (Matrix a)
instance Set a => Set [a]
instance Eq a => Eq (BinTree a)
instance Eq Comp
instance Eq PropValue
instance Eq a => Eq (Tree a)
instance Text a => Text (BinTree a)
instance Text Comp
instance Text PropValue
instance Text a => Text (Tree a)

